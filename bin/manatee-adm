#!/usr/bin/env node
// -*- mode: js -*-
/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

/*
 * Copyright (c) 2014, Joyent, Inc.
 */

var fs = require('fs');
var util = require('util');

var adm = require('../lib/adm');
var cmdln = require('cmdln');


function ManateeAdm() {
    cmdln.Cmdln.call(this, {
        name: 'manatee-adm',
        desc: 'Inspect and administer Manatee'
    });
}
util.inherits(ManateeAdm, cmdln.Cmdln);

/**
 * Display the current status of the manatee shard(s).
 */
ManateeAdm.prototype.do_status = function (subcmd, opts, args, cb) {
    var self = this;
    if (opts.help) {
        self.do_help('help', {}, [subcmd], cb);
    }

    if (!opts.zk) {
        self.do_help('help', {}, [subcmd], cb);
    }

    adm.status(opts, function (err, status) {
        if (err) {
            return cb(err);
        } else {
            console.log(JSON.stringify(status));
            return cb();
        }
    });
};
ManateeAdm.prototype.do_status.options = [ {
    names: ['help', 'h'],
    type: 'bool',
    help: 'Show this help'
}, {
    names: ['legacyOrderMode', 'l'],
    type: 'bool',
    helpArg: 'LEGACY_ORDER_MODE',
    help: 'Show what the status is based on what is in the ZK election path ' +
        'rather than what is in the cluster state object.',
    default: false
}, {
    names: ['shard', 's'],
    type: 'string',
    helpArg: 'SHARD',
    help: 'The manatee shard to stat. If empty status will show all shards'
}, {
    names: ['zk', 'z'],
    type: 'string',
    helpArg: 'ZOOKEEPER_URL',
    help: 'The zookeeper connection string. e.g. 127.0.0.1:2181',
    default: process.env.ZK_IPS
}];
ManateeAdm.prototype.do_status.help = (
    'Show status of a manatee shard. \n' +
    '\n' +
    'Usage:\n' +
    '    {{name}} status [OPTIONS]\n' +
    '\n' +
    '{{options}}'
);

/**
 * Display the current cluster state.
 */
ManateeAdm.prototype.do_state = function (subcmd, opts, args, cb) {
    var self = this;
    if (opts.help) {
        self.do_help('help', {}, [subcmd], cb);
    }

    if (!opts.zk) {
        self.do_help('help', {}, [subcmd], cb);
    }

    adm.state(opts, function (err, state) {
        if (err) {
            return cb(err);
        } else {
            console.log(JSON.stringify(state));
            return cb();
        }
    });
};
ManateeAdm.prototype.do_state.options = [ {
    names: ['help', 'h'],
    type: 'bool',
    help: 'Show this help'
}, {
    names: ['shard', 's'],
    type: 'string',
    helpArg: 'SHARD',
    help: 'Get the state for this manatee shard.',
    default: process.env.SHARD
}, {
    names: ['zk', 'z'],
    type: 'string',
    helpArg: 'ZOOKEEPER_URL',
    help: 'The zookeeper connection string. e.g. 127.0.0.1:2181',
    default: process.env.ZK_IPS
}];
ManateeAdm.prototype.do_state.help = (
    'Show the cluster state stored in ZK for this shard. \n' +
    '\n' +
    'Usage:\n' +
    '    {{name}} state [OPTIONS]\n' +
    '\n' +
    '{{options}}'
);

/**
 * Display the current (raw) active nodes for a shard.
 */
ManateeAdm.prototype.do_active = function (subcmd, opts, args, cb) {
    var self = this;
    if (opts.help) {
        self.do_help('help', {}, [subcmd], cb);
    }

    if (!opts.zk) {
        self.do_help('help', {}, [subcmd], cb);
    }

    adm.active(opts, function (err, active) {
        if (err) {
            return cb(err);
        } else {
            console.log(JSON.stringify(active));
            return cb();
        }
    });
};
ManateeAdm.prototype.do_active.options = [ {
    names: ['help', 'h'],
    type: 'bool',
    help: 'Show this help'
}, {
    names: ['shard', 's'],
    type: 'string',
    helpArg: 'SHARD',
    help: 'Get the active for this manatee shard.',
    default: process.env.SHARD
}, {
    names: ['zk', 'z'],
    type: 'string',
    helpArg: 'ZOOKEEPER_URL',
    help: 'The zookeeper connection string. e.g. 127.0.0.1:2181',
    default: process.env.ZK_IPS
}];
ManateeAdm.prototype.do_active.help = (
    'Display the current active peers for a shard. \n' +
    'Since this displays exactly what is in zookeeper, this may show\n' +
    'multiple entries for the same manatee.\n' +
    '\n' +
    'Usage:\n' +
    '    {{name}} active [OPTIONS]\n' +
    '\n' +
    '{{options}}'
);

/**
 * Backfill the cluster state.
 */
ManateeAdm.prototype.do_state_backfill = function (subcmd, opts, args, cb) {
    var self = this;
    if (opts.help) {
        self.do_help('help', {}, [subcmd], cb);
    }

    if (!opts.zk) {
        self.do_help('help', {}, [subcmd], cb);
    }

    adm.stateBackfill(opts, function (err, state) {
        if (err) {
            return cb(err);
        } else {
            console.log('Ok.');
            return cb();
        }
    });
};
ManateeAdm.prototype.do_state_backfill.options = [ {
    names: ['help', 'h'],
    type: 'bool',
    help: 'Show this help'
}, {
    names: ['shard', 's'],
    type: 'string',
    helpArg: 'SHARD',
    help: 'Backfill the state for this manatee shard.',
    default: process.env.SHARD
}, {
    names: ['zk', 'z'],
    type: 'string',
    helpArg: 'ZOOKEEPER_URL',
    help: 'The zookeeper connection string. e.g. 127.0.0.1:2181',
    default: process.env.ZK_IPS
}];
ManateeAdm.prototype.do_state_backfill.help = (
    'Backfill the cluster state for the shard, only if no state exists. \n' +
    '\n' +
    '!!! WARNING !!! \n' +
    'This will only work when no cluster state has been written. \n' +
    'It is only to be used when moving to Manatee using the persistent \n' +
    'cluster state in ZK. \n' +
    '\n' +
    'This tool may backfill the cluster state in a surprising order: \n' +
    'Primary -> Primary, Async -> Sync, Sync -> Async' +
    'The reason for this is so that when the Async is deployed first, it \n' +
    'will set itself up as a sync, then when the sync is deployed it will \n' +
    'set itself up as async.  This facilitates the migration to using \n' +
    'cluster state rather than election order to decide topology. \n' +
    '\n' +
    'Usage:\n' +
    '    {{name}} state [OPTIONS]\n' +
    '\n' +
    '{{options}}'
);

/**
 * Check the status of a manatee lock
 */
ManateeAdm.prototype.do_check_lock = function (subcmd, opts, args, cb) {
    var self = this;
    if (opts.help) {
        self.do_help('help', {}, [subcmd], cb);
    }

    if (!opts.path) {
        self.do_help('help', {}, [subcmd], cb);
    }

    if (!opts.zk) {
        self.do_help('help', {}, [subcmd], cb);
    }

    adm.checkLock(opts, function (err, stat) {
        if (err || stat) {
            return cb(new Error('lock exists or unable to get lock'));
        }

        return cb();
    });
};
ManateeAdm.prototype.do_check_lock.options = [ {
    names: ['help', 'h'],
    type: 'bool',
    help: 'Show this help'
}, {
    names: ['path', 'p'],
    type: 'string',
    helpArg: 'LOCK_PATH',
    help: 'The manatee lock path in ZK'
}, {
    names: ['zk', 'z'],
    type: 'string',
    helpArg: 'ZOOKEEPER_URL',
    help: 'The zookeeper connection string. e.g. 127.0.0.1:2181',
    default: process.env.ZK_IPS
}];
ManateeAdm.prototype.do_check_lock.help = (
    'Check the status of a manatee lock. \n' +
    '\n' +
    'Usage:\n' +
    '    {{name}} check_lock [OPTIONS]\n' +
    '\n' +
    '{{options}}'
);

/**
 * Clear the shard out of error mode.
 */
ManateeAdm.prototype.do_clear = function (subcmd, opts, args, cb) {
    var self = this;
    if (opts.help) {
        self.do_help('help', {}, [subcmd], cb);
    }

    if (!opts.shard) {
        self.do_help('help', {}, [subcmd], cb);
    }

    if (!opts.zk) {
        self.do_help('help', {}, [subcmd], cb);
    }

    adm.clear(opts, cb);
};
ManateeAdm.prototype.do_clear.options = [ {
    names: ['help', 'h'],
    type: 'bool',
    help: 'Show this help'
}, {
    names: ['shard', 's'],
    type: 'string',
    helpArg: 'SHARD',
    help: 'The manatee shard',
    default: process.env.SHARD
}, {
    names: ['zk', 'z'],
    type: 'string',
    helpArg: 'ZOOKEEPER_URL',
    help: 'The zookeeper connection string. e.g. 127.0.0.1:2181',
    default: process.env.ZK_IPS
}];
ManateeAdm.prototype.do_clear.help = (
    'Clear the shard\'s error node. \n' +
    '\n' +
    'Usage:\n' +
    '    {{name}} clear [OPTIONS]\n' +
    '\n' +
    '{{options}}'
);

/**
 * Get the state transition history of the shard.
 */
ManateeAdm.prototype.do_history = function (subcmd, opts, args, cb) {
    var self = this;
    if (opts.help) {
        self.do_help('help', {}, [subcmd], cb);
    }

    if (!opts.shard) {
        self.do_help('help', {}, [subcmd], cb);
    }

    adm.history(opts, function (err, result) {
        if (err) {
            return cb(err);
        }

        for (var i = 0; i < result.length; i++) {
            console.log(JSON.stringify(result[i]));
        }
        return cb();
    });
};
ManateeAdm.prototype.do_history.options = [ {
    names: ['help', 'h'],
    type: 'bool',
    help: 'Show this help'
}, {
    names: ['shard', 's'],
    type: 'string',
    helpArg: 'SHARD',
    help: 'The manatee shard',
    default: process.env.SHARD
}, {
    names: ['zk', 'z'],
    type: 'string',
    helpArg: 'ZOOKEEPER_URL',
    help: 'The zookeeper connection string. e.g. 127.0.0.1:2181',
    default: process.env.ZK_IPS
}];
ManateeAdm.prototype.do_history.help = (
    'Displays histories for this shard. \n' +
    '\n' +
    'Usage:\n' +
    '    {{name}} history [OPTIONS]\n' +
    '\n' +
    '{{options}}'
);

/**
 * Rebuild a manatee peer in a shard.
 */
ManateeAdm.prototype.do_rebuild = function (subcmd, opts, args, cb) {
    var self = this;
    if (opts.help) {
        self.do_help('help', {}, [subcmd], cb);
    }
    if (!opts.config) {
        self.do_help('help', {}, [subcmd], cb);
    }

    var cfg;

    try {
        cfg = JSON.parse(fs.readFileSync(opts.config, 'utf8'));
        opts.config = cfg;
    } catch (e) {
        return cb(e);
    }
    adm.rebuild(opts, cb);
};
ManateeAdm.prototype.do_rebuild.options = [ {
    names: ['help', 'h'],
    type: 'bool',
    help: 'Show this help'
}, {
    names: ['config', 'c'],
    type: 'string',
    helpArg: 'CONFIG',
    help: 'The path to the manatee sitter config to list',
    default: process.env.MANATEE_SITTER_CONFIG
}, {
    names: ['full', 'f'],
    type: 'bool',
    help: 'Try a full rebuild without rolling back the snapshot first',
    default: false
}];
ManateeAdm.prototype.do_rebuild.help = (
    'Rebuild a manatee zone. \n' +
    '\n' +
    'Usage:\n' +
    '    {{name}} rebuild [OPTIONS]\n' +
    '\n' +
    '{{options}}'
);

cmdln.main(new ManateeAdm(), {showErrStack: true});
